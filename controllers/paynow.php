<?phprequire_once('lib/Stripe.php');class Paynow extends Controller{    private $ivr_message;    function __construct() {        $this->ivr_message=(object) parse_ini_file('application/ivr_message.ini');    }            function index(){        $params=$this->urlPara();        $this->loadModel('transactions');        $this->loadModel('orders_model');        $orders_model=new Orders_model();        $txns=new Transactions();        // $expriry= str_split($this->decript_str($params[2]),2);        // $card['number']=$this->decript_str($params[1]);        // $card['exp_month']=$expriry[0];        // $card['exp_year']=$expriry[1];        if(isset($_REQUEST["Result"]))        {        	$order=$txns->get_order_data($params[0]);        	$status = $_REQUEST["Result"];        	if($status=="success")        	{        		// $text = "Thank you for your payment";		        $strip_id = $_REQUEST["PaymentConfirmationCode"];		        $notes['amount']=$order['amount'];		        $notes['currency']="usd";		        $notes=json_encode($notes);		        $orders_model->update_order_data($order['id'], $order['phone'], $order['amount'], 'paid');		        $txns->update_transaction('completed',$strip_id,'',$notes,$params[0]);		        $data['ivr_payment_success']= $this->ivr_message->payment_success;		        $this->loadView('twiml/twiml_payemt_success',$data);        	}        	else if($status=="payment-connector-error")        	{        		// $text = "The Payment Gateway is reporting an error";				$strip_id="Not available";				$data['message']="The Payment Gateway is reporting an error";		        $data['redirect']=  Config::$base_url."/twiml/confirm_payment/".$params[0].".php";		        $notes=json_encode($_REQUEST["PaymentError"]);			 	$txns->update_transaction('failed',$strip_id,'',$notes,$params[0]);		        $data['ivr_payment_failed']=  $this->ivr_message->payment_failed;		        $data['ivr_cancel_confirm'] = $this->ivr_message->cancel_confirm;		        $this->loadView('twiml/twiml_payemt_failed',$data);        	}        	else        	{        		// $text = "The payment was not completed successfully";        		$strip_id="Not available";				$data['message']="The payment was not completed successfully";		        $data['redirect']=  Config::$base_url."/twiml/confirm_payment/".$params[0].".php";		        $notes=json_encode("The payment was not completed successfully");			 	$txns->update_transaction('failed',$strip_id,'',$notes,$params[0]);		        $data['ivr_payment_failed']=  $this->ivr_message->payment_failed;		        $data['ivr_cancel_confirm'] = $this->ivr_message->cancel_confirm;		        $this->loadView('twiml/twiml_payemt_failed',$data);        	}        }                       /* Stripe::setApiKey(Config::$secret_key);        try {        				$card['object']='card';			$customer = Stripe_Customer::create(array('description'=>'14088271419','source'=>$card));			$strip_customer=$customer->id;			try{		$test=Stripe_Charge::create(			array(			 "amount" => $order['amount']*100,			 "currency" => "usd",			 "customer" => $strip_customer,			 "description" => "PhonePay Payment"  			  ));        $charge = $test->__toArray(true);        $strip_id=$charge['id'];        $notes['amount']=$charge['amount'];        $notes['currency']=$charge['currency'];        $notes=json_encode($notes);        $orders_model->update_order_data($order['id'], $order['phone'], $order['amount'], 'paid');        $txns->update_transaction('completed',$strip_id,$strip_customer,$notes,$params[0]);        $data['ivr_payment_success']= $this->ivr_message->payment_success;        $this->loadView('twiml/twiml_payemt_success',$data);			}			catch(Exception $e){				throw $e;			}        }         catch(Exception $e) {         $strip_id="Not available";	 $body = $e->getJsonBody();	 $err = $body['error']; 	 $data['message']=$err['message'];         $data['redirect']=  Config::$base_url."/twiml/confirm_payment/".$params[0].".php";         $notes=json_encode($err);	 $txns->update_transaction('failed',$strip_id,'',$notes,$params[0]);         $data['ivr_payment_failed']=  $this->ivr_message->payment_failed;         $data['ivr_cancel_confirm'] = $this->ivr_message->cancel_confirm;         $this->loadView('twiml/twiml_payemt_failed',$data);        } */            }         function  decript_str($str){        $str= strrev($str);        $str=str_split($str);        $string='';        foreach ($str as $key=>$value) {            if ($key % 2 == 0) {                $string.=$value;              }        }        return $string;    }	function refund(){		$stripe_id=  user_in_filter($_POST['stripe_id']);		$amount=user_in_filter($_POST['amount']);        $this->loadModel('transactions');		$om=new Transactions();						Stripe::setApiKey(Config::$secret_key);		$ch = Stripe_Charge::retrieve($stripe_id); 		try{			$re = $ch->refunds->create(array('amount'=>$amount*100));	        $response['status']=TRUE;	        $response['message']="$".$amount." has refunded";		}catch(Exception $re){			$response['status']=FALSE;		        $response['message']="Unable to refund.".$re->getMessage();		}				if( $response['status']){			$om->refund($stripe_id,$amount);		}	        echo json_encode($response);		 	}		function charge_overage(){		$stripe_id=  user_in_filter($_POST['stripe_id']);		$amount=user_in_filter(trim($_POST['amount']));        $this->loadModel('transactions');		$om=new Transactions();		$customer_id=$om->get_stripe_customer($stripe_id);				Stripe::setApiKey(Config::$secret_key);		try{			$test=Stripe_Charge::create(				array(				 "amount" => $amount*100,				 "currency" => "usd",				 "customer" => $customer_id, 				 "description" => "PhonePay Overage Charge" ));			$charge = $test->__toArray(true);			$response['status']=TRUE;	        $response['message']="$".$amount." charged.";		}catch(Exception $re){			$response['status']=FALSE;				$response['message']="Unable to Charge. ".$re->getMessage();		}				if( $response['status']){			$om->overage($stripe_id,$amount);		}	        echo json_encode($response);		 			}		function testpay(){				Stripe::setApiKey(Config::$secret_key);						$card['number']='47698769876987';        $card['exp_month']=11;        $card['exp_year']=19;				$card['object']='card';		$customer = Stripe_Customer::create(array('description'=>'14088271419','source'=>$card));		echo "<pre>";		print_r($customer);		echo "<br>**************************************************************";		echo $customer->id;				$test=Stripe_Charge::create(						array(			 "amount" => 1000,			 "currency" => "usd",			 "customer" => 'cus_5u8MlC1ed1KDzk', 			 "description" => "Charge for test@example.com" ));        $charge = $test->__toArray(true);				print_r($charge);					}	        //end of class        }